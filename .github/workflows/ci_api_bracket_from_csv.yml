name: api-bracket-from-csv

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "deterministic | mc"
        required: false
        default: "deterministic"
      mc_runs:
        description: "Solo si mode=mc (p.ej. 1000)"
        required: false
        default: "0"
      tname:
        description: "Nombre torneo"
        required: false
        default: "US Open"
      tmonth:
        description: "Mes (1-12)"
        required: false
        default: "8"
      years_back:
        description: "Histórico (años hacia atrás)"
        required: false
        default: "4"

jobs:
  bracket:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SR_API_KEY:   ${{ secrets.SR_API_KEY }}
      PORT: "8080"
      APP_MODULE: "main:app"  # ajusta si tu app está en otro módulo

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install flask
          fi

      - name: Sanity files & env
        run: |
          set -e
          test -f apps_script/start_api.py || { echo "::error::apps_script/start_api.py no existe"; exit 1; }
          test -f apps_script/simulate_bracket_from_csv.py || { echo "::error::apps_script/simulate_bracket_from_csv.py no existe"; exit 1; }
          test -f data/entrants.csv || { echo "::error::data/entrants.csv no existe"; exit 1; }
          [ -n "$SUPABASE_URL" ] || { echo "::error::SUPABASE_URL missing"; exit 1; }
          [ -n "$SUPABASE_KEY" ] || { echo "::error::SUPABASE_KEY missing"; exit 1; }
          test -f main.py || echo "::warning::main.py no encontrado; APP_MODULE=$APP_MODULE"

      - name: Syntax check
        run: |
          python - <<'PY'
          import py_compile
          py_compile.compile('main.py', doraise=True)
          print("OK: main.py compila")
          PY

      - name: Start API
        env:
          APP_MODULE: ${{ env.APP_MODULE }}
          PORT: ${{ env.PORT }}
        run: |
          set -e
          nohup python -u apps_script/start_api.py > app.log 2>&1 &
          for i in $(seq 1 40); do
            if curl -sf http://127.0.0.1:${PORT}/health  >/dev/null 2>&1; then break; fi
            if curl -sf http://127.0.0.1:${PORT}/healthz >/dev/null 2>&1; then break; fi
            sleep 1
          done
          if ! (curl -sf http://127.0.0.1:${PORT}/health >/dev/null 2>&1 || curl -sf http://127.0.0.1:${PORT}/healthz >/dev/null 2>&1); then
            echo "::error::API no responde"; tail -n 200 app.log || true; exit 1
          fi

      - name: Run bracket simulation
        env:
          API_URL: "http://127.0.0.1:${{ env.PORT }}/matchup"
          ENTRANTS_CSV: "data/entrants.csv"
          MODE: ${{ github.event.inputs.mode }}
          MC_RUNS: ${{ github.event.inputs.mc_runs }}
          TNAME: ${{ github.event.inputs.tname }}
          TMONTH: ${{ github.event.inputs.tmonth }}
          YEARS_BACK: ${{ github.event.inputs.years_back }}
        run: |
          set -e
          python apps_script/simulate_bracket_from_csv.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bracket-output
          path: |
            /tmp/bracket.json
            /tmp/bracket_matches.csv

      - name: Render bracket HTML
        run: |
          set -e
          python apps_script/render_bracket_html.py

      - name: Upload bracket artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bracket-viz
          path: |
            artifacts/bracket.html
            artifacts/bracket_matches.csv


      - name: app.log (tail if fail)
        if: failure()
        run: |
          echo "----- app.log (tail) -----"
          tail -n 200 app.log || true
