name: Draw Load from Staging (resolve names → entries → matches)

on:
  workflow_dispatch:
    inputs:
      tourney_id:
        description: "tourney_id en estratego_v1.tournaments (texto o número, ej: 2025-0330 o 581)"
        required: true

jobs:
  load_draw:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight secret
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          if [ -z "$SUPABASE_DB_URL" ]; then
            echo "❌ Falta el secreto SUPABASE_DB_URL"; exit 1;
          fi
          echo "✅ SUPABASE_DB_URL presente"

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Apply function v2 + preflight checks + load & build
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          TID: ${{ inputs.tourney_id }}
        run: |
          cat > /tmp/load_draw_from_staging.sql <<'SQL'
          -- =========[ v2: build_draw_matches sin tabla 'draws' ]=========
          create or replace function public.build_draw_matches(p_tourney_id text)
          returns void
          language plpgsql
          as $$
          declare
            v_size int;
            v_round text;
            i int;
            v_idx int;
            top_pos int;
            bot_pos int;
          begin
            -- tamaño desde draw_entries
            select count(*)::int into v_size
            from public.draw_entries
            where tourney_id = p_tourney_id;

            if v_size is null or v_size < 2 then
              raise exception 'No entries for tourney_id=%', p_tourney_id;
            end if;

            delete from public.draw_matches where tourney_id = p_tourney_id;

            if v_size >= 64 then
              v_round := 'R64';
            elsif v_size >= 32 then
              v_round := 'R32';
            else
              v_round := 'R16';
            end if;

            v_idx := 1;
            i := 1;
            while i <= v_size loop
              top_pos := i;
              bot_pos := v_size - i + 1;

              insert into public.draw_matches(id, tourney_id, round, top_id, bot_id)
              select concat(v_round, '-', v_idx),
                     p_tourney_id,
                     v_round,
                     (select player_id from public.draw_entries where tourney_id=p_tourney_id and pos=top_pos),
                     (select player_id from public.draw_entries where tourney_id=p_tourney_id and pos=bot_pos);

              v_idx := v_idx + 1;
              i := i + 2;
            end loop;
          end $$;

          -- =========[ Preflight checks ]=========
          -- 1) Existe el torneo en estratego_v1.tournaments
          do $$
          declare v_exists int;
          begin
            select count(*) into v_exists
            from estratego_v1.tournaments
            where tourney_id::text = :'TID'::text;
            if coalesce(v_exists,0)=0 then
              raise exception 'No existe tourney_id=% en estratego_v1.tournaments', :'TID';
            end if;
          end$$;

          -- 2) Hay staging para ese TID
          do $$
          declare v_stg int;
          begin
            select count(*) into v_stg
            from public.stg_draw_entries_by_name
            where tourney_id::text = :'TID'::text;
            if coalesce(v_stg,0)=0 then
              raise exception 'No hay filas en stg_draw_entries_by_name para tourney_id=% (carga primero el CSV al staging)', :'TID';
            end if;
          end$$;

          begin;

          -- =========[ Normalizar nombres (flip APELLIDO, Nombre) ]=========
          drop table if exists tmp_src;
          create temporary table tmp_src as
          select
            s.tourney_id,
            s.pos,
            s.seed,
            s.tag,
            s.player_name,
            case
              when s.player_name ilike '%, %'
                then trim(split_part(s.player_name, ',', 2)) || ' ' || trim(split_part(s.player_name, ',', 1))
              else s.player_name
            end as name_flipped
          from public.stg_draw_entries_by_name s
          where s.tourney_id::text = :'TID'::text;

          -- =========[ Resolver player_id (INTEGER) por exacto o flipped ]=========
          drop table if exists tmp_name_to_id;
          create temporary table tmp_name_to_id as
          with j as (
            select
              x.*,
              p1.player_id as pid_exact,
              p2.player_id as pid_flipped
            from tmp_src x
            left join public.players_dim p1 on lower(p1.name) = lower(x.player_name)
            left join public.players_dim p2 on lower(p2.name) = lower(x.name_flipped)
          )
          select
            tourney_id,
            pos,
            seed,
            tag,
            player_name,
            coalesce(pid_exact, pid_flipped) as player_id,        -- INTEGER o NULL
            case when tag='QUAL'
              then ((row_number() over(partition by tourney_id order by pos) - 1) % 8) + 1
            end as qual_slot
          from j;

          -- =========[ Log de no resueltos (excluye BYE/QUAL) ]=========
          do $$
          declare v_unres int;
          begin
            select count(*) into v_unres
            from tmp_name_to_id
            where player_id is null and (tag is null or tag not in ('BYE','QUAL'));
            if coalesce(v_unres,0) > 0 then
              raise notice 'Nombres no resueltos: %', v_unres;
            end if;
          end$$;

          -- =========[ Escribir draw_entries ]=========
          delete from public.draw_entries where tourney_id::text = :'TID'::text;

          insert into public.draw_entries(tourney_id, pos, player_id, seed, tag)
          select
            tourney_id,
            pos,
            case when tag in ('BYE','QUAL') then null else player_id end,
            seed,
            tag
          from tmp_name_to_id
          order by pos;

          -- =========[ Construir ronda inicial ]=========
          select public.build_draw_matches(:'TID');

          commit;

          -- =========[ Resumen ]=========
          -- Entradas
          select 'entries' as kind, count(*) as n
          from public.draw_entries
          where tourney_id::text = :'TID'::text;

          -- Partidos por ronda
          select round, count(*) as n
          from public.draw_matches
          where tourney_id::text = :'TID'::text
          group by 1
          order by 1;
          SQL

          psql --dbname="$SUPABASE_DB_URL" --set=ON_ERROR_STOP=1 --set=tid="$TID" -f /tmp/load_draw_from_staging.sql
