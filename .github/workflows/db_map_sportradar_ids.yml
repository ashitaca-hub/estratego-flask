name: db-map-sportradar-ids

on:
  workflow_dispatch:
    inputs:
      p1_srid:
        description: "SR competitor number del Player 1 (ej. 225050)"
        required: true
      p1_id:
        description: "player_id INTEGER del Player 1 (si lo sabes). Si no, usa p1_name"
        required: false
      p1_name:
        description: "Nombre del Player 1 en tu DB (ILIKE '%nombre%')"
        required: false
      p2_srid:
        description: "SR competitor number del Player 2 (ej. 407573)"
        required: false
      p2_id:
        description: "player_id INTEGER del Player 2 (si lo sabes). Si no, usa p2_name"
        required: false
      p2_name:
        description: "Nombre del Player 2 en tu DB (ILIKE '%nombre%')"
        required: false
      run_smoke:
        description: "Probar /matchup tras mapear (true/false)"
        required: false
        default: "true"

jobs:
  map-and-verify:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      P1_SRID: ${{ github.event.inputs.p1_srid }}
      P1_ID:   ${{ github.event.inputs.p1_id }}
      P1_NAME: ${{ github.event.inputs.p1_name }}
      P2_SRID: ${{ github.event.inputs.p2_srid }}
      P2_ID:   ${{ github.event.inputs.p2_id }}
      P2_NAME: ${{ github.event.inputs.p2_name }}
      RUN_SMOKE: ${{ github.event.inputs.run_smoke }}

    steps:
      - uses: actions/checkout@v4

      - name: Prechecks
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${SUPABASE_URL:-}" ] || { echo "::error::SUPABASE_URL missing"; exit 1; }
          [ -n "${SUPABASE_KEY:-}" ] || { echo "::error::SUPABASE_KEY missing"; exit 1; }
          [ -n "${P1_SRID:-}" ] || { echo "::error::p1_srid missing"; exit 1; }

      - name: Install jq + python (para smoke)
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          sudo apt-get install -y python3-pip || true
          python3 -m pip install --upgrade pip || true

      - name: Helpers (RPC + vista public.players_lookup)
        shell: bash
        run: |
          set -euo pipefail
          cat > utils.sh <<'SH'
          set -euo pipefail
          BASE="${SUPABASE_URL%/}"

          # RPC: búsqueda por nombre (estratego_v1.players)
          find_candidates() {
            local NAME="$1"
            curl -sS -X POST "${BASE}/rest/v1/rpc/find_players_by_name" \
              -H "apikey: ${SUPABASE_KEY}" \
              -H "Authorization: Bearer ${SUPABASE_KEY}" \
              -H "Content-Type: application/json" \
              -d "{\"p_name\": \"${NAME}\"}"
          }

          # RPC: mapear SRID -> player_id (INTEGER)
          map_srid_to_id() {
            local ID="$1"; local SRID="$2"
            # Enviar ID como número, no como string
            curl -sS -X POST "${BASE}/rest/v1/rpc/map_sportradar_id" \
              -H "apikey: ${SUPABASE_KEY}" \
              -H "Authorization: Bearer ${SUPABASE_KEY}" \
              -H "Content-Type: application/json" \
              -d "{\"p_id\": ${ID}, \"p_srid\": \"${SRID}\"}" >/dev/null
          }

          # Verificación en vista pública
          verify_srid() {
            local SRID="$1"
            curl -sS -G "${BASE}/rest/v1/players_lookup" \
              -H "apikey: ${SUPABASE_KEY}" \
              -H "Authorization: Bearer ${SUPABASE_KEY}" \
              -H "Content-Type: application/json" \
              --data-urlencode "ext_sportradar_id=eq.${SRID}" \
              --data-urlencode "select=player_id,name,ext_sportradar_id" \
              --data-urlencode "limit=3" | jq .
          }
          SH
          chmod +x utils.sh

      - name: Map Player 1 (SRID → player_id INTEGER)
        shell: bash
        run: |
          set -euo pipefail
          . ./utils.sh
          ID="${P1_ID:-}"
          NAME_IN="${P1_NAME:-}"
          if [ -z "$ID" ]; then
            [ -n "$NAME_IN" ] || { echo "::error::p1_name requerido si no pasas p1_id"; exit 1; }
            CANDS="$(find_candidates "$NAME_IN")"
            echo "== Candidatos P1 =="; echo "$CANDS" | jq .
            ID="$(echo "$CANDS" | jq -r '.[0].player_id // empty')"
          fi
          [[ "$ID" =~ ^[0-9]+$ ]] || { echo "::error::player_id de P1 debe ser INTEGER"; exit 1; }

          map_srid_to_id "$ID" "$P1_SRID"
          echo "== Verificación P1 =="; verify_srid "$P1_SRID"

      - name: Map Player 2 (opcional)
        if: ${{ env.P2_SRID != '' || env.P2_ID != '' || env.P2_NAME != '' }}
        shell: bash
        run: |
          set -euo pipefail
          . ./utils.sh
          [ -n "${P2_SRID:-}" ] || { echo "::error::p2_srid requerido"; exit 1; }
          ID="${P2_ID:-}"
          NAME_IN="${P2_NAME:-}"
          if [ -z "$ID" ]; then
            [ -n "$NAME_IN" ] || { echo "::error::p2_name requerido si no pasas p2_id"; exit 1; }
            CANDS="$(find_candidates "$NAME_IN")"
            echo "== Candidatos P2 =="; echo "$CANDS" | jq .
            ID="$(echo "$CANDS" | jq -r '.[0].player_id // empty')"
          fi
          [[ "$ID" =~ ^[0-9]+$ ]] || { echo "::error::player_id de P2 debe ser INTEGER"; exit 1; }

          map_srid_to_id "$ID" "$P2_SRID"
          echo "== Verificación P2 =="; verify_srid "$P2_SRID"

      # (Opcional) Smoke /matchup si quieres validar fin-a-fin
      - name: Setup & start API (smoke)
        if: ${{ env.RUN_SMOKE == 'true' }}
        run: |
          python3 -m pip install -r requirements.txt || python3 -m pip install flask requests
          nohup python3 -c "from main import app; app.run(host='127.0.0.1', port=8080)" >/dev/null 2>&1 &
          for i in $(seq 1 60); do
            curl -fsS -X POST http://127.0.0.1:8080/matchup \
              -H "Content-Type: application/json" \
              -d '{"tournament":{"name":"Cincinnati","month":8},"years_back":4}' >/dev/null 2>&1 && break || true
            sleep 1
          done

      - name: (Smoke) POST /matchup con SR IDs
        if: ${{ env.RUN_SMOKE == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          P1_SR_FULL="sr:competitor:${P1_SRID}"
          P2_SR_FULL="$P1_SR_FULL"
          if [ -n "${P2_SRID:-}" ]; then P2_SR_FULL="sr:competitor:${P2_SRID}"; fi

          PAYLOAD=$(jq -n --arg p "$P1_SR_FULL" --arg o "$P2_SR_FULL" \
                    '{player_id:$p, opponent_id:$o, tournament:{name:"Cincinnati",month:8}, years_back:4}')
          echo "== Payload /matchup ==" && echo "$PAYLOAD" | jq .

          RESP=$(curl -sS -X POST http://127.0.0.1:8080/matchup -H "Content-Type: application/json" -d "$PAYLOAD")
          echo "== Respuesta /matchup ==" && echo "$RESP" | jq .

          # Si tu backend ya resuelve SR -> player_id INTEGER, aquí no habrá 'sr:' (opcional)
          # echo "$RESP" | jq -e '.inputs.player_id|type=="number"' >/dev/null || \
          #   echo "::warning::inputs.player_id sigue siendo SR; revisa el handler /map."
