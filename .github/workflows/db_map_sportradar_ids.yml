name: db-map-sportradar-ids

on:
  workflow_dispatch:
    inputs:
      p1_srid:
        description: "SR competitor number del Player 1 (ej. 225050)"
        required: true
      p1_uuid:
        description: "UUID del Player 1 (si lo sabes). Si no, usa p1_name"
        required: false
      p1_name:
        description: "Nombre del Player 1 (si no pasas UUID). Se usa ILIKE '%nombre%'"
        required: false
        default: "Carlos Alcaraz"
      p2_srid:
        description: "SR competitor number del Player 2 (ej. 407573)"
        required: false
      p2_uuid:
        description: "UUID del Player 2 (si lo sabes). Si no, usa p2_name"
        required: false
      p2_name:
        description: "Nombre del Player 2 (si no pasas UUID). ILIKE '%nombre%'"
        required: false
        default: "Alexander Zverev"
      run_smoke:
        description: "Probar /matchup tras mapear (true/false)"
        required: false
        default: "true"

jobs:
  map-and-verify:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}   # https://<ref>.supabase.co
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}   # service_role (secreta)
      DATABASE_URL: ${{ secrets.DATABASE_URL }}   # opcional (solo para smoke, no necesario aquí)
      SR_API_KEY: ${{ secrets.SR_API_KEY }}       # opcional
      P1_SRID: ${{ github.event.inputs.p1_srid }}
      P1_UUID: ${{ github.event.inputs.p1_uuid }}
      P1_NAME: ${{ github.event.inputs.p1_name }}
      P2_SRID: ${{ github.event.inputs.p2_srid }}
      P2_UUID: ${{ github.event.inputs.p2_uuid }}
      P2_NAME: ${{ github.event.inputs.p2_name }}
      RUN_SMOKE: ${{ github.event.inputs.run_smoke }}

    steps:
      - name: Prechecks
        run: |
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_KEY" ]; then
            echo "::error::Faltan secrets SUPABASE_URL/SUPABASE_KEY"; exit 1; fi
          if [ -z "$P1_SRID" ]; then
            echo "::error::p1_srid es obligatorio"; exit 1; fi

      - name: Install jq + curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Helpers (functions)
        id: helpers
        run: |
          cat > helpers.sh <<'SH'
          set -e

          auth_headers() {
            echo "-H" "apikey: ${SUPABASE_KEY}" "-H" "Authorization: Bearer ${SUPABASE_KEY}" "-H" "Content-Type: application/json"
          }

          encode_uri() { printf '%s' "$1" | jq -sRr @uri; }

          find_uuid_by_name() {
            local NAME="$1"
            local NAME_Q; NAME_Q=$(encode_uri "$NAME")
            curl -sS "${SUPABASE_URL}/rest/v1/players?name=ilike.*${NAME_Q}*&select=player_id,name&limit=1" \
              $(auth_headers) | jq -r '.[0].player_id // empty'
          }

          clear_srid() {
            local SRID="$1"
            curl -sS -X PATCH "${SUPABASE_URL}/rest/v1/players?ext_sportradar_id=eq.${SRID}" \
              $(auth_headers) -H "Prefer: return=representation" \
              -d '{"ext_sportradar_id": null}' >/dev/null
          }

          set_player_srid() {
            local UUID="$1"
            local SRID="$2"
            curl -sS -X PATCH "${SUPABASE_URL}/rest/v1/players?player_id=eq.${UUID}" \
              $(auth_headers) -H "Prefer: return=representation" \
              -d "{\"ext_sportradar_id\": \"${SRID}\"}" >/dev/null
          }

          verify_srid() {
            local SRID="$1"
            curl -sS "${SUPABASE_URL}/rest/v1/players?ext_sportradar_id=eq.${SRID}&select=name,player_id,ext_sportradar_id&limit=3" \
              $(auth_headers) | jq .
          }
          SH
          chmod +x helpers.sh

      - name: Map Player 1 (SRID → UUID)
        run: |
          . ./helpers.sh
          UUID="$P1_UUID"
          if [ -z "$UUID" ] && [ -n "$P1_NAME" ]; then
            UUID=$(find_uuid_by_name "$P1_NAME")
          fi
          if [ -z "$UUID" ]; then
            echo "::error::No se encontró Player 1 (uuid o name)"; exit 1; fi

          echo "Limpiando SRID en otros jugadores si existe..."
          clear_srid "$P1_SRID"

          echo "Asignando SRID ${P1_SRID} a ${UUID}..."
          set_player_srid "$UUID" "$P1_SRID"

          echo "Verificación Player 1:"
          . ./helpers.sh; verify_srid "$P1_SRID"

      - name: Map Player 2 (opcional)
        if: ${{ env.P2_SRID != '' || env.P2_UUID != '' || env.P2_NAME != '' }}
        run: |
          . ./helpers.sh
          if [ -z "$P2_SRID" ]; then
            echo "::error::p2_srid requerido para Player 2"; exit 1; fi
          UUID="$P2_UUID"
          if [ -z "$UUID" ] && [ -n "$P2_NAME" ]; then
            UUID=$(find_uuid_by_name "$P2_NAME")
          fi
          if [ -z "$UUID" ]; then
            echo "::error::No se encontró Player 2 (uuid o name)"; exit 1; fi

          echo "Limpiando SRID en otros jugadores si existe..."
          clear_srid "$P2_SRID"

          echo "Asignando SRID ${P2_SRID} a ${UUID}..."
          set_player_srid "$UUID" "$P2_SRID"

          echo "Verificación Player 2:"
          . ./helpers.sh; verify_srid "$P2_SRID"

      - name: (Opcional) Smoke /matchup con SR IDs
        if: ${{ env.RUN_SMOKE == 'true' }}
        run: |
          # Arranca la app Flask en background
          nohup python -c "from main import app; app.run(host='127.0.0.1', port=8080)" >/dev/null 2>&1 &
          # Espera a que arranque
          for i in $(seq 1 30); do
            curl -fsS -X POST http://127.0.0.1:8080/matchup \
              -H "Content-Type: application/json" \
              -d '{"tournament":{"name":"Cincinnati","month":8},"years_back":4}' >/dev/null 2>&1 && break || true
            sleep 1
          done || { echo 'App did not start in time'; exit 1; }

          P1_SR_FULL="sr:competitor:${P1_SRID}"
          if [ -n "$P2_SRID" ]; then
            P2_SR_FULL="sr:competitor:${P2_SRID}"
          else
            P2_SR_FULL="$P1_SR_FULL"
          fi

          PAYLOAD=$(jq -n --arg p "$P1_SR_FULL" --arg o "$P2_SR_FULL" \
                    '{player_id:$p, opponent_id:$o, tournament:{name:"Cincinnati",month:8}, years_back:4}')
          echo "== Payload /matchup ==" && echo "$PAYLOAD" | jq .

          RESP=$(curl -sS -X POST http://127.0.0.1:8080/matchup -H "Content-Type: application/json" -d "$PAYLOAD")
          echo "== Respuesta /matchup ==" && echo "$RESP" | jq .

          # Comprobar que el handler ya devuelve UUIDs (se mapeó SR->UUID)
          echo "$RESP" | jq -e '.inputs.player_id|type=="string" and (.inputs.player_id|startswith("sr:")|not)' >/dev/null || \
            echo "::warning::inputs.player_id sigue siendo SR; revisa que el SRID esté asignado en players.ext_sportradar_id."


          # Comprobar que el handler ya devuelve UUIDs (quiere decir que mapeó SR->UUID)
          echo "$RESP" | jq -e '.inputs.player_id|type=="string" and (.inputs.player_id|startswith("sr:")|not)' >/dev/null || \
            echo "::warning::inputs.player_id sigue siendo SR; revisa que el SRID esté asignado a un jugador en la tabla players."
