name: DB – Explore schema & joinability (fs_matches_long vs estratego_v1)

on:
  workflow_dispatch:
    inputs:
      years_back:
        description: "Años hacia atrás para conteos (para fs_matches_long)"
        required: true
        default: "5"
      sample_limit:
        description: "Filas de muestra por consulta"
        required: true
        default: "50"

jobs:
  explore:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      YEARS_BACK: ${{ inputs.years_back }}
      SAMPLE_LIMIT: ${{ inputs.sample_limit }}

    steps:
      - name: Sanity – psql connectivity
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select now();"

      - name: Ensure norm_tourney(txt) helper (no DROP)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          CREATE OR REPLACE FUNCTION public.norm_tourney(txt text)
          RETURNS text LANGUAGE sql IMMUTABLE AS $$
            SELECT regexp_replace(lower(coalesce(txt,'')), '\s+', ' ', 'g')
          $$;
          SQL

      - name: Describe key tables (schema)
        run: |
          echo ">>> \d+ public.fs_matches_long"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\d+ public.fs_matches_long" || true
          echo ">>> \d+ estratego_v1.matches"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\d estratego_v1.matches" || true
          echo ">>> \d estratego_v1.tournaments"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\d estratego_v1.tournaments" || true

      - name: Samples – fs_matches_long
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT * FROM public.fs_matches_long
          ORDER BY match_date DESC NULLS LAST
          LIMIT ${SAMPLE_LIMIT};"
          echo ">>> Distinct columns presence (surface/speed_bucket)"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT
            COUNT(*) AS total,
            SUM((surface IS NOT NULL)::int) AS with_surface,
            SUM((speed_bucket IS NOT NULL)::int) AS with_speed_bucket
          FROM public.fs_matches_long;"

      - name: Counts by year – fs_matches_long
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT extract(year from match_date)::int AS year, COUNT(*) AS n
          FROM public.fs_matches_long
          WHERE match_date >= (current_date - interval '${YEARS_BACK} years')
          GROUP BY 1 ORDER BY 1;"

      - name: Distinct tournaments – fs_matches_long (top)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT public.norm_tourney(tournament_name) AS key, tournament_name,
                 COUNT(*) AS n
          FROM public.fs_matches_long
          GROUP BY 1,2
          ORDER BY n DESC
          LIMIT ${SAMPLE_LIMIT};"

      - name: Distinct tournaments – estratego_v1.tournaments (top)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT public.norm_tourney(name) AS key, name, level,
                 COUNT(*) OVER (PARTITION BY public.norm_tourney(name)) AS dup_key_ct
          FROM estratego_v1.tournaments
          ORDER BY dup_key_ct DESC NULLS LAST
          LIMIT ${SAMPLE_LIMIT};"

      - name: Try join by normalized name (rough match)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          WITH fs AS (
            SELECT public.norm_tourney(tournament_name) AS key, tournament_name,
                   COUNT(*) AS fs_n
            FROM public.fs_matches_long
            GROUP BY 1,2
          ),
          et AS (
            SELECT public.norm_tourney(name) AS key, name, level
            FROM estratego_v1.tournaments
          )
          SELECT fs.key, fs.tournament_name, et.name AS et_name, et.level, fs.fs_n
          FROM fs
          LEFT JOIN et USING (key)
          ORDER BY fs.fs_n DESC NULLS LAST, fs.key
          LIMIT ${SAMPLE_LIMIT};"

      - name: Look up example – Zagreb
        run: |
          echo ">>> fs_matches_long tournaments like 'Zagreb%'"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT DISTINCT tournament_name
          FROM public.fs_matches_long
          WHERE tournament_name ILIKE 'Zagreb%';"
          echo ">>> estratego_v1.tournaments like 'Zagreb%'"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          SELECT tourney_id, name, level
          FROM estratego_v1.tournaments
          WHERE name ILIKE 'Zagreb%';"

      - name: Save CSV artifacts (join check & top tournaments)
        run: |
          # Top fs tournaments
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\copy (
            SELECT public.norm_tourney(tournament_name) AS key, tournament_name, COUNT(*) AS n
            FROM public.fs_matches_long
            GROUP BY 1,2 ORDER BY n DESC LIMIT 500
          ) TO STDOUT WITH CSV HEADER" > /tmp/fs_tournaments_top.csv

          # Join rough map
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\copy (
            WITH fs AS (
              SELECT public.norm_tourney(tournament_name) AS key, tournament_name,
                     COUNT(*) AS fs_n
              FROM public.fs_matches_long
              GROUP BY 1,2
            ),
            et AS (
              SELECT public.norm_tourney(name) AS key, name, level, tourney_id
              FROM estratego_v1.tournaments
            )
            SELECT fs.key, fs.tournament_name, et.name AS et_name, et.level, et.tourney_id, fs.fs_n
            FROM fs
            LEFT JOIN et USING (key)
            ORDER BY fs.fs_n DESC NULLS LAST, fs.key
          ) TO STDOUT WITH CSV HEADER" > /tmp/join_fs_et_by_key.csv

          # Matches count by year for fs
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\copy (
            SELECT extract(year from match_date)::int AS year, COUNT(*) AS n
            FROM public.fs_matches_long
            GROUP BY 1 ORDER BY 1
          ) TO STDOUT WITH CSV HEADER" > /tmp/fs_counts_by_year.csv

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: db_explore_outputs
          path: |
            /tmp/fs_tournaments_top.csv
            /tmp/join_fs_et_by_key.csv
            /tmp/fs_counts_by_year.csv
