name: load-sr-mapping

on:
  workflow_dispatch:

jobs:
  load:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # Cambia si tu tabla de nombres no es public.players_min
      PLAYER_NAME_TABLE: "public.players_min"

    steps:
      - uses: actions/checkout@v4

      - name: Check inputs
        run: |
          test -n "$DATABASE_URL" || { echo "::error::DATABASE_URL missing"; exit 1; }
          test -f "data/players_sr_map.xlsx" || { echo "::error::data/players_sr_map.xlsx no existe"; exit 1; }

      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          pip install pandas openpyxl

      - name: Convert Excel -> CSV normalizado
        run: |
          python apps_script/convert_excel.py
          test -f /tmp/players_sr_map.csv || { echo "::error::No se gener√≥ /tmp/players_sr_map.csv"; exit 1; }

      - name: Apply SQL (create table, stage, upsert)
        run: |
          set -e
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS unaccent;"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

          # 1) Tabla destino (mapping)
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          CREATE TABLE IF NOT EXISTS public.players_ext(
            player_id int PRIMARY KEY,
            ext_sportradar_id text UNIQUE
          );"

          # 2) Staging temporal
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "DROP TABLE IF EXISTS public._tmp_sr_map;"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          CREATE TABLE public._tmp_sr_map(
            name text,
            sr_full text,
            sr_short text
          );"

          # 3) Cargar CSV a staging
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\copy public._tmp_sr_map(name,sr_full,sr_short) FROM '/tmp/players_sr_map.csv' WITH (FORMAT csv, HEADER true);"

          # 4) Upsert por nombre normalizado (sin crear funciones)
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          WITH src AS (
            SELECT
              trim(regexp_replace(lower(unaccent(name)), '[^a-z0-9]+', ' ', 'g')) AS nkey,
              sr_short
            FROM public._tmp_sr_map
            WHERE sr_short ~ '^[0-9]+$'
          ),
          joined AS (
            SELECT s.nkey, s.sr_short, p.player_id, p.name
            FROM src s
            JOIN ${PLAYER_NAME_TABLE} p
              ON trim(regexp_replace(lower(unaccent(p.name)), '[^a-z0-9]+', ' ', 'g')) = s.nkey
          )
          INSERT INTO public.players_ext(player_id, ext_sportradar_id)
          SELECT player_id, sr_short FROM joined
          ON CONFLICT (player_id) DO UPDATE SET ext_sportradar_id = EXCLUDED.ext_sportradar_id;"

          # 5) Exportar no encontrados para revisar
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\copy (
            WITH src AS (
              SELECT
                name,
                sr_full,
                sr_short,
                trim(regexp_replace(lower(unaccent(name)), '[^a-z0-9]+', ' ', 'g')) AS nkey
              FROM public._tmp_sr_map
              WHERE sr_short ~ '^[0-9]+$'
            )
            SELECT s.name, s.sr_full, s.sr_short
            FROM src s
            LEFT JOIN ${PLAYER_NAME_TABLE} p
              ON trim(regexp_replace(lower(unaccent(p.name)), '[^a-z0-9]+', ' ', 'g')) = s.nkey
            WHERE p.player_id IS NULL
          ) TO '/tmp/unmatched_names.csv' WITH (FORMAT csv, HEADER true);"

          # 6) Resumen
          echo "== RESUMEN =="
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
          WITH counts AS (
            SELECT
              (SELECT count(*) FROM public._tmp_sr_map WHERE sr_short ~ '^[0-9]+$') AS total_in,
              (SELECT count(*) FROM public._tmp_sr_map t
                 JOIN ${PLAYER_NAME_TABLE} p
                   ON trim(regexp_replace(lower(unaccent(p.name)), '[^a-z0-9]+', ' ', 'g'))
                    = trim(regexp_replace(lower(unaccent(t.name)), '[^a-z0-9]+', ' ', 'g'))
               WHERE t.sr_short ~ '^[0-9]+$') AS matched,
              (SELECT count(*) FROM public.players_ext) AS total_mapped
          )
          SELECT * FROM counts;"

      - name: Upload artifacts (CSV usados / no encontrados)
        uses: actions/upload-artifact@v4
        with:
          name: sr-mapping-load
          path: |
            /tmp/players_sr_map.csv
            /tmp/unmatched_names.csv
