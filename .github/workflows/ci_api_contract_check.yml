
name: Contract check against estratego-db

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  contract-check:
    runs-on: ubuntu-latest
    env:
      DB_REPO: your-org/estratego-db   # TODO: cambia a <tu-org>/estratego-db
      GH_TOKEN: ${{ secrets.DB_CONTRACT_PAT }}  # (opcional) PAT con permiso 'repo' si el DB repo es privado
    steps:
      - name: Checkout API repo
        uses: actions/checkout@v4

      - name: Install gh and yq
        run: |
          echo "$GH_TOKEN" | gh auth login --with-token || true
          curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Download latest CONTRACT_DB.yml from estratego-db releases
        run: |
          gh release download -R "$DB_REPO" -p "CONTRACT_DB.yml" --clobber

      - name: Show contract
        run: |
          echo "== CONTRACT_DB.yml =="
          cat CONTRACT_DB.yml || true
          echo "== API expected contract =="
          cat CONTRACT_DB.expected.yml || true

      - name: Validate SemVer major
        run: |
          DB_VER=$(yq '.version' CONTRACT_DB.yml)
          API_MIN=$(yq '.compatibility.api_min_version' CONTRACT_DB.yml)
          EXP_MAJOR=$(yq '.expected_major' CONTRACT_DB.expected.yml)

          DB_MAJOR=${DB_VER%%.*}
          echo "DB contract version: $DB_VER (major=$DB_MAJOR)"
          echo "API requires major: $EXP_MAJOR (api_min=$API_MIN)"

          if [ "$DB_MAJOR" != "$EXP_MAJOR" ]; then
            echo "::error::Incompatible contract major. Expected $EXP_MAJOR.x but got $DB_VER"
            exit 1
          fi

      - name: Validate required views/columns
        run: |
          REQ_VIEW="court_speed_rankig_norm"
          for col in tournament_name surface speed_rank category; do
            COUNT=$(yq -r ".views[] | select(.name==\"$REQ_VIEW\") | .columns[] | select(.name==\"$col\") | length" CONTRACT_DB.yml | wc -l)
            if [ "$COUNT" -eq 0 ]; then
              echo "::error::Missing column '$col' in view $REQ_VIEW per CONTRACT_DB.yml"
              exit 1
            fi
          done
          echo "View $REQ_VIEW contains required columns."

      - name: Validate required RPCs
        run: |
          req=(get_player_hist_features get_matchup_hist_vector get_tourney_meta)
          for r in "${req[@]}"; do
            COUNT=$(yq -r ".rpcs[] | select(.name==\"$r\") | length" CONTRACT_DB.yml | wc -l)
            if [ "$COUNT" -eq 0 ]; then
              echo "::error::Missing RPC '$r' per CONTRACT_DB.yml"
              exit 1
            fi
          done
          echo "All required RPCs present."

      - name: (Optional) Live DB check (schema sanity)
        if: ${{ secrets.DATABASE_URL != '' }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          echo "== Checking live DB schema =="
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
            select column_name, data_type
            from information_schema.columns
            where table_schema='public' and table_name='court_speed_rankig_norm'
            order by ordinal_position;
          "
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
            select proname
            from pg_proc
            where proname in ('get_player_hist_features','get_matchup_hist_vector','get_tourney_meta')
            order by 1;
          "
