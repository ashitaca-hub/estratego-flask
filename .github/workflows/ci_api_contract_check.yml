
name: Contract check against estratego-db (curl)

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  contract-check:
    runs-on: ubuntu-latest
    env:
      DB_REPO: ashitaca-hub/estratego-db            # <-- Cambia a <tu-org>/estratego-db
      DB_CONTRACT_PAT: ${{ secrets.DB_CONTRACT_PAT }}  # PAT con 'Contents: Read' y 'Metadata: Read' en repo privado DB
      DATABASE_URL: ${{ secrets.DATABASE_URL }}       # opcional para check en vivo

    steps:
      - name: Checkout API repo
        uses: actions/checkout@v4

      - name: Install tools (jq, yq, curl provided)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Download CONTRACT_DB.yml from latest release (private repo via REST API)
        env:
          AUTH: ${{ env.DB_CONTRACT_PAT }}
        run: |
          if [ -z "$AUTH" ]; then
            echo "::error::Falta el secreto DB_CONTRACT_PAT con permisos de lectura sobre $DB_REPO"
            exit 1
          fi
          echo "Consultando último release de $DB_REPO ..."
          curl -sSL -H "Authorization: token $AUTH"                -H "Accept: application/vnd.github+json"                "https://api.github.com/repos/$DB_REPO/releases/latest"                -o release.json

          if [ ! -s release.json ]; then
            echo "::error::No se obtuvo respuesta del API releases/latest"
            exit 1
          fi

          ASSET_ID=$(jq -r '.assets[] | select(.name=="CONTRACT_DB.yml") | .id' release.json)
          if [ -z "$ASSET_ID" ] || [ "$ASSET_ID" = "null" ]; then
            echo "::error::Asset 'CONTRACT_DB.yml' no encontrado en el último release."
            echo "Activos encontrados:"
            jq -r '.assets[].name' release.json || true
            exit 1
          fi

          echo "Descargando asset id=$ASSET_ID ..."
          curl -sSL -H "Authorization: token $AUTH"                -H "Accept: application/octet-stream"                "https://api.github.com/repos/$DB_REPO/releases/assets/$ASSET_ID"                -o CONTRACT_DB.yml

          test -s CONTRACT_DB.yml || { echo "::error::Descarga vacía de CONTRACT_DB.yml"; exit 1; }
          echo "OK: CONTRACT_DB.yml descargado"

      - name: Show contract
        run: |
          echo "== CONTRACT_DB.yml =="
          cat CONTRACT_DB.yml || true
          echo "== API expected contract =="
          cat CONTRACT_DB.expected.yml || true

      - name: Validate SemVer major
        run: |
          DB_VER=$(yq '.version' CONTRACT_DB.yml)
          API_MIN=$(yq '.compatibility.api_min_version' CONTRACT_DB.yml)
          EXP_MAJOR=$(yq '.expected_major' CONTRACT_DB.expected.yml)

          DB_MAJOR=${DB_VER%%.*}
          echo "DB contract version: $DB_VER (major=$DB_MAJOR)"
          echo "API requires major: $EXP_MAJOR (api_min=$API_MIN)"

          if [ "$DB_MAJOR" != "$EXP_MAJOR" ]; then
            echo "::error::Incompatible contract major. Expected $EXP_MAJOR.x but got $DB_VER"
            exit 1
          fi

      - name: Validate required views/columns
        run: |
          REQ_VIEW="court_speed_rankig_norm"
          for col in tournament_name surface speed_rank category; do
            COUNT=$(yq -r ".views[] | select(.name==\"$REQ_VIEW\") | .columns[] | select(.name==\"$col\") | length" CONTRACT_DB.yml | wc -l)
            if [ "$COUNT" -eq 0 ]; then
              echo "::error::Missing column '$col' in view $REQ_VIEW per CONTRACT_DB.yml"
              exit 1
            fi
          done
          echo "View $REQ_VIEW contains required columns."

      - name: Validate required RPCs
        run: |
          req=(get_player_hist_features get_matchup_hist_vector get_tourney_meta)
          for r in "${req[@]}"; do
            COUNT=$(yq -r ".rpcs[] | select(.name==\"$r\") | length" CONTRACT_DB.yml | wc -l)
            if [ "$COUNT" -eq 0 ]; then
              echo "::error::Missing RPC '$r' per CONTRACT_DB.yml"
              exit 1
            fi
          done
          echo "All required RPCs present."

      - name: (Optional) Live DB check (schema sanity)
        if: ${{ env.DATABASE_URL != '' }}
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          echo "== Checking live DB schema =="
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
            select column_name, data_type
            from information_schema.columns
            where table_schema='public' and table_name='court_speed_rankig_norm'
            order by ordinal_position;
          "
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
            select proname
            from pg_proc
            where proname in ('get_player_hist_features','get_matchup_hist_vector','get_tourney_meta')
            order by 1;
          "
