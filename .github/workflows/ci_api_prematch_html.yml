name: api-prematch-html

on:
  workflow_dispatch:
    inputs:
      player_input:
        description: "Jugador A (sr:competitor:ID o nombre)"
        required: false
        default: "sr:competitor:225050"
      opponent_input:
        description: "Jugador B (sr:competitor:ID o nombre)"
        required: false
        default: "sr:competitor:407573"
      tournament_name:
        description: "Nombre del torneo"
        required: false
        default: "US Open"
      month:
        description: "Mes (1-12)"
        required: false
        default: "8"
      years_back:
        description: "Histórico (años hacia atrás)"
        required: false
        default: "4"

jobs:
  prematch:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SR_API_KEY:   ${{ secrets.SR_API_KEY }}
      IN_PLAYER:  ${{ github.event.inputs.player_input }}
      IN_OPP:     ${{ github.event.inputs.opponent_input }}
      IN_TNAME:   ${{ github.event.inputs.tournament_name }}
      IN_MONTH:   ${{ github.event.inputs.month }}
      IN_YEARS:   ${{ github.event.inputs.years_back }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (jq + Python)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          pip install -r requirements.txt

      - name: Syntax check
        run: |
          python -c "import py_compile; py_compile.compile('main.py', doraise=True); print('OK: main.py compila')"

      - name: Launch API on 8080
        run: |
          set -euo pipefail
          python apps_script/start_api.py main:app &
          # Espera a que /health responda
          for i in $(seq 1 40); do
            if curl -fsS http://127.0.0.1:8080/health >/dev/null; then
              echo "API lista"
              break
            fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:8080/health || (echo "Error: API no responde" && exit 1)

      - name: Show injected script snippet
        run: |
          set -euo pipefail
          sed -n '/<script id="data-slot">/,/<\/script>/p' /tmp/prematch.html | head -n 40


      - name: Build /matchup payload
        run: |
          set -euo pipefail
          P="${IN_PLAYER:-}"
          O="${IN_OPP:-}"
          T="${IN_TNAME:-US Open}"
          M="${IN_MONTH:-8}"
          Y="${IN_YEARS:-4}"

          jq -n \
            --arg tname "$T" \
            --arg p "$P" \
            --arg o "$O" \
            --argjson mon ${M:-8} \
            --argjson yb ${Y:-4} \
            '
            {
              tournament:{name:$tname, month:$mon},
              years_back:$yb
            }
            + ( ($p|test("^sr:")) as $psr
               | if $psr then {player_id:$p} else {player:$p} end)
            + ( ($o|test("^sr:")) as $osr
               | if $osr then {opponent_id:$o} else {opponent:$o} end)
            ' > /tmp/payload.json

          echo "== PAYLOAD ==" && jq . /tmp/payload.json

      - name: Call /matchup
        run: |
          set -euo pipefail
          curl -sS -X POST "http://127.0.0.1:8080/matchup" \
               -H "Content-Type: application/json" \
               -d @/tmp/payload.json \
               -o /tmp/resp.json

          echo "== JSON ==" && jq . /tmp/resp.json >/dev/null || (echo "Respuesta no es JSON válido" && exit 1)

      - name: Inject window.resp into template
        run: |
          set -euo pipefail
          test -f apps_script/prematch_template.html || (echo "Falta apps_script/prematch_template.html" && exit 1)

          python - <<'PY'
          import json, re, sys, io
          tpl = open("apps_script/prematch_template.html","r",encoding="utf-8").read()
          data = json.load(open("/tmp/resp.json","r",encoding="utf-8"))
          js = "window.resp = " + json.dumps(data, ensure_ascii=False) + ";"
          out = re.sub(r'<script id="data-slot">.*?</script>',
                       '<script id="data-slot">'+js+'</script>',
                       tpl, flags=re.S)
          open("/tmp/prematch.html","w",encoding="utf-8").write(out)
          print("OK: /tmp/prematch.html")
          PY

      - name: Verify injection (no demo fallback)
        run: |
          set -euo pipefail
          grep -q "window.resp" /tmp/prematch.html || (echo "No se encontró window.resp en HTML" && exit 1)
          grep -q "prob_player" /tmp/prematch.html || (echo "No se ve prob_player en HTML" && exit 1)
          echo "Primeras líneas:"; head -n 40 /tmp/prematch.html

      - name: Upload prematch HTML
        uses: actions/upload-artifact@v4
        with:
          name: prematch_html
          path: /tmp/prematch.html
          if-no-files-found: error
