name: DB – Minimal setup (YTD + norm_tourney + MV/indexes + tourney map)

on:
  workflow_dispatch:
    inputs:
      tourney_name:
        description: "Torneo para mapear (p.ej. Cincinnati)"
        required: true
        default: "Cincinnati"
      tourney_country_code:
        description: "País del torneo (ISO2: US, ESP, IT, ...)"
        required: true
        default: "US"

jobs:
  setup-db:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      T_NAME: ${{ inputs.tourney_name }}
      T_CC:   ${{ inputs.tourney_country_code }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity – psql connectivity
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select now();"

      - name: Setup Python (to write SQL files safely)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate SQL files
        run: |
          python - << 'PY'
          import pathlib, textwrap
          base = pathlib.Path("/tmp")

          # A) norm_tourney: CREATE OR REPLACE (sin DROP) para no romper dependencias
          (base/"norm_tourney.sql").write_text(textwrap.dedent(r"""
            CREATE OR REPLACE FUNCTION public.norm_tourney(txt text)
            RETURNS text
            LANGUAGE sql
            IMMUTABLE
            AS $$
              SELECT regexp_replace(lower(coalesce(txt,'')), '\s+', ' ', 'g')
            $$;
          """).strip()+"\n", encoding="utf-8")

          # B) v_player_ytd_now_int: DROP VIEW CASCADE + CREATE
          (base/"v_player_ytd_now_int.sql").write_text(textwrap.dedent(r"""
            DROP VIEW IF EXISTS public.v_player_ytd_now_int CASCADE;

            CREATE VIEW public.v_player_ytd_now_int AS
            WITH base AS (
              SELECT
                m.match_date,
                m.player_id           AS p_id,
                (m.winner_id = m.player_id)::int AS w_as_p
              FROM public.fs_matches_long m
              WHERE EXTRACT(YEAR FROM m.match_date) = EXTRACT(YEAR FROM CURRENT_DATE)
            ),
            agg AS (
              SELECT
                p_id AS player_id,
                COUNT(*)::int    AS n_matches,
                SUM(w_as_p)::int AS n_wins
              FROM base
              GROUP BY 1
            )
            SELECT
              player_id,
              n_matches,
              n_wins,
              CASE WHEN n_matches>0 THEN n_wins::numeric/n_matches ELSE NULL END AS wr
            FROM agg;
          """).strip()+"\n", encoding="utf-8")

          # C1) Materializar fs_matches_long si es vista (o refrescar si ya es MV)
          (base/"fs_matches_long_materialize.sql").write_text(textwrap.dedent(r"""
            DO $$
            DECLARE
              relkind_char char;
            BEGIN
              SELECT c.relkind INTO relkind_char
              FROM pg_class c
              JOIN pg_namespace n ON n.oid = c.relnamespace
              WHERE n.nspname = 'public' AND c.relname = 'fs_matches_long';

              IF relkind_char IS NULL THEN
                RAISE EXCEPTION 'public.fs_matches_long no existe (vista o tabla esperada)';
              END IF;

              IF relkind_char = 'v' THEN
                IF NOT EXISTS (
                  SELECT 1 FROM pg_class c2 JOIN pg_namespace n2 ON n2.oid=c2.relnamespace
                  WHERE n2.nspname='public' AND c2.relname='fs_matches_long_mv' AND c2.relkind='m'
                ) THEN
                  EXECUTE 'CREATE MATERIALIZED VIEW public.fs_matches_long_mv AS
                           SELECT * FROM public.fs_matches_long WITH NO DATA';
                END IF;
                EXECUTE 'REFRESH MATERIALIZED VIEW public.fs_matches_long_mv';
              ELSIF relkind_char = 'm' THEN
                EXECUTE 'REFRESH MATERIALIZED VIEW public.fs_matches_long';
              END IF;
            END $$;
          """).strip()+"\n", encoding="utf-8")

          # C2) Índices sobre MV/tabla (no sobre la vista normal)
          (base/"fs_matches_long_indexes.sql").write_text(textwrap.dedent(r"""
            DO $$
            DECLARE
              target_name text;
              relkind_char char;
            BEGIN
              SELECT c.relkind INTO relkind_char
              FROM pg_class c
              JOIN pg_namespace n ON n.oid = c.relnamespace
              WHERE n.nspname='public' AND c.relname='fs_matches_long';

              IF relkind_char = 'v' THEN
                target_name := 'public.fs_matches_long_mv';
              ELSE
                target_name := 'public.fs_matches_long';  -- 'r' tabla o 'm' MV
              END IF;

              IF NOT EXISTS (
                SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid=c.relnamespace
                WHERE c.relkind='i' AND c.relname='fsml_player_date_idx'
              ) THEN
                EXECUTE format('CREATE INDEX fsml_player_date_idx ON %s (player_id, match_date)', target_name);
              END IF;

              IF NOT EXISTS (
                SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid=c.relnamespace
                WHERE c.relkind='i' AND c.relname='fsml_winner_date_idx'
              ) THEN
                EXECUTE format('CREATE INDEX fsml_winner_date_idx ON %s (winner_id, match_date)', target_name);
              END IF;

              IF NOT EXISTS (
                SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid=c.relnamespace
                WHERE c.relkind='i' AND c.relname='fsml_match_date_idx'
              ) THEN
                EXECUTE format('CREATE INDEX fsml_match_date_idx ON %s (match_date)', target_name);
              END IF;
            END $$;
          """).strip()+"\n", encoding="utf-8")

          # D) tourney_country_map + upsert del torneo de inputs
          (base/"tourney_country_map.sql").write_text(textwrap.dedent(r"""
            CREATE TABLE IF NOT EXISTS public.tourney_country_map(
              tourney_key  text PRIMARY KEY,
              country_code text
            );

            INSERT INTO public.tourney_country_map(tourney_key, country_code)
            VALUES (public.norm_tourney(:'T_NAME'), :'T_CC')
            ON CONFLICT (tourney_key) DO UPDATE
            SET country_code = EXCLUDED.country_code;
          """).strip()+"\n", encoding="utf-8")
          PY

      - name: Apply SQL – norm_tourney (CREATE OR REPLACE)
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/norm_tourney.sql

      - name: Apply SQL – v_player_ytd_now_int (drop+create)
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/v_player_ytd_now_int.sql

      - name: Apply SQL – materialize/refresh fs_matches_long*
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/fs_matches_long_materialize.sql

      - name: Apply SQL – indexes on fs_matches_long* (MV/tabla)
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/fs_matches_long_indexes.sql

      - name: Apply SQL – tourney_country_map upsert
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 \
          -v T_NAME="${T_NAME}" \
          -v T_CC="${T_CC}" \
          -f /tmp/tourney_country_map.sql

      - name: Verify
        run: |
          echo ">>> v_player_ytd_now_int sample:"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT * FROM public.v_player_ytd_now_int ORDER BY n_matches DESC NULLS LAST LIMIT 5;"

          echo ">>> storage for fs_matches_long:"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT c.relname, c.relkind FROM pg_class c JOIN pg_namespace n ON n.oid=c.relnamespace WHERE n.nspname='public' AND c.relname IN ('fs_matches_long','fs_matches_long_mv');"

          echo ">>> describe fs_matches_long (view or table):"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\d+ public.fs_matches_long" || true

          echo ">>> describe fs_matches_long_mv (if created):"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\d+ public.fs_matches_long_mv" || true

          echo ">>> tourney_country_map entry for '${T_NAME}':"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT * FROM public.tourney_country_map WHERE tourney_key = public.norm_tourney('${T_NAME}');"
