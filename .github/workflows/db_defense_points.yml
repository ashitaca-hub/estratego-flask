name: DB – Defense Points from estratego_v1 (by tournaments.tourney_date)

on:
  workflow_dispatch:
    inputs:
      season_year:
        description: "Año para defensa (usa tournaments.tourney_date)"
        required: true
        default: "2024"

jobs:
  defense-from-et:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SEASON_YEAR: ${{ inputs.season_year }}

    steps:
      - name: Install psql
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Sanity
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select now();"

      - name: Setup helpers + target table
        run: |
          cat > /tmp/setup.sql <<'SQL'
          -- normalizador
          CREATE OR REPLACE FUNCTION public.norm_tourney(txt text)
          RETURNS text LANGUAGE sql IMMUTABLE AS $$
            SELECT regexp_replace(lower(coalesce(txt,'')), '\s+', ' ', 'g')
          $$;

          -- tabla destino (idempotente)
          CREATE TABLE IF NOT EXISTS public.player_defense_prev_year (
            tourney_key text NOT NULL,
            player_id   int  NOT NULL,
            points      int  NOT NULL,
            title_code  text,
            PRIMARY KEY (tourney_key, player_id)
          );
          SQL
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/setup.sql

      - name: Backfill champs + runners for ${SEASON_YEAR}
        shell: bash
        run: |
          set -euo pipefail

          cat > /tmp/backfill.sql <<'SQL'
          -- Puntos por nivel
          WITH points(level, champ, runner) AS (
            VALUES ('G',2000,1200), ('M',1000,600), ('A',500,300)
          ),
          -- Torneos del año pedido (por tournaments.tourney_date)
          tmap AS (
            SELECT t.tourney_id,
                   public.norm_tourney(t.name) AS tourney_key,
                   t.level,
                   t.tourney_date
            FROM estratego_v1.tournaments t
            WHERE EXTRACT(YEAR FROM t.tourney_date) = :SEASON_YEAR
          ),
          -- Final por torneo (si hay varios registros marcados 'F', coge el de mayor match_id)
          finals AS (
            SELECT m.tourney_id, MAX(m.match_id) AS final_match_id
            FROM estratego_v1.matches m
            JOIN tmap tt USING (tourney_id)
            WHERE m.round = 'F'
            GROUP BY 1
          ),
          -- Fila final con campeón y runner (runner por loser_id; si no, por player/opponent)
          final_rows AS (
            SELECT m.tourney_id,
                   m.match_id AS final_match_id,
                   m.winner_id,
                   COALESCE(
                     m.loser_id,
                     CASE WHEN m.player_id = m.winner_id THEN m.opponent_id ELSE m.player_id END
                   ) AS runner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.match_id   = f.final_match_id
            WHERE m.round='F'
          ),
          -- Campeones
          champs AS (
            SELECT tt.tourney_key, fr.winner_id AS player_id, p.champ AS points, 'champ' AS title_code
            FROM final_rows fr
            JOIN tmap   tt USING (tourney_id)
            JOIN points p  ON p.level = tt.level
          ),
          -- Finalistas
          runners AS (
            SELECT tt.tourney_key, fr.runner_id AS player_id, p.runner AS points, 'runner' AS title_code
            FROM final_rows fr
            JOIN tmap   tt USING (tourney_id)
            JOIN points p  ON p.level = tt.level
          ),
          upserts AS (
            SELECT * FROM champs
            UNION ALL
            SELECT * FROM runners
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM upserts
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -v SEASON_YEAR="$SEASON_YEAR" -f /tmp/backfill.sql

      - name: Export CSV artifact (verificación)
        run: |
          mkdir -p /tmp/defense_from_et
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL' > /tmp/defense_from_et/defense_points_prev_year_from_et.csv
          COPY (
            SELECT
              pd.tourney_key,
              t.name AS tournament_name,
              t.level,
              t.tourney_date,
              pd.player_id,
              pd.points,
              pd.title_code
            FROM public.player_defense_prev_year pd
            LEFT JOIN estratego_v1.tournaments t
              ON public.norm_tourney(t.name) = pd.tourney_key
            WHERE EXTRACT(YEAR FROM t.tourney_date) = :SEASON_YEAR
            ORDER BY t.tourney_date DESC, pd.tourney_key, pd.points DESC, pd.player_id
          ) TO STDOUT WITH CSV HEADER;
          SQL
          echo "CSV rows:"; wc -l /tmp/defense_from_et/defense_points_prev_year_from_et.csv || true
          head -n 12 /tmp/defense_from_et/defense_points_prev_year_from_et.csv || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: defense_points_prev_year_from_et
          path: /tmp/defense_from_et/defense_points_prev_year_from_et.csv
          retention-days: 7
