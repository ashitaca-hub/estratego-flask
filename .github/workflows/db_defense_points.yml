name: DB – Defense Points (final backfill from estratego_v1)

on:
  workflow_dispatch:
    inputs:
      season_year:
        description: "Año de referencia para defensa (ej. 2024)"
        required: true
        default: "2024"
      filter_by_year:
        description: "Filtrar por año si hay columna de fecha (true/false)"
        required: true
        default: "true"

jobs:
  defense-points:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SEASON_YEAR: ${{ inputs.season_year }}
      FILTER_BY_YEAR: ${{ inputs.filter_by_year }}

    steps:
      - name: Install psql
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Sanity
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select now();"

      - name: Setup helpers and target table
        run: |
          cat > /tmp/defense_setup.sql <<'SQL'
          -- Normaliza nombres de torneo (minúsculas + colapsa espacios)
          CREATE OR REPLACE FUNCTION public.norm_tourney(txt text)
          RETURNS text LANGUAGE sql IMMUTABLE AS $$
            SELECT regexp_replace(lower(coalesce(txt,'')), '\s+', ' ', 'g')
          $$;

          -- Tabla destino (si no existe)
          CREATE TABLE IF NOT EXISTS public.player_defense_prev_year (
            tourney_key text NOT NULL,
            player_id   int  NOT NULL,
            points      int  NOT NULL,
            title_code  text,           -- 'champ' | 'runner'
            PRIMARY KEY (tourney_key, player_id)
          );
          SQL
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/defense_setup.sql

      - name: Detect matches schema (date/loser/opponent columns)
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # Detect fecha usable
          DATECOL=$(psql "$DATABASE_URL" -At -c "
            SELECT column_name
            FROM information_schema.columns
            WHERE table_schema='estratego_v1'
              AND table_name='matches'
              AND column_name IN ('match_date','dt','date','start_time','start_dt','played_at')
            ORDER BY CASE column_name
              WHEN 'match_date' THEN 1
              WHEN 'dt'         THEN 2
              WHEN 'date'       THEN 3
              WHEN 'start_time' THEN 4
              WHEN 'start_dt'   THEN 5
              WHEN 'played_at'  THEN 6
              ELSE 100
            END
            LIMIT 1;
          ")
          echo "DATECOL=$DATECOL" | tee -a $GITHUB_ENV

          HAS_LOSER=$(psql "$DATABASE_URL" -At -c "
            SELECT EXISTS (
              SELECT 1 FROM information_schema.columns
              WHERE table_schema='estratego_v1' AND table_name='matches'
                AND column_name='loser_id'
            );
          ")
          echo "HAS_LOSER=$HAS_LOSER" | tee -a $GITHUB_ENV

          HAS_OPP=$(psql "$DATABASE_URL" -At -c "
            SELECT EXISTS (
              SELECT 1 FROM information_schema.columns
              WHERE table_schema='estratego_v1' AND table_name='matches'
                AND column_name='opponent_id'
            );
          ")
          echo "HAS_OPP=$HAS_OPP" | tee -a $GITHUB_ENV

          echo "Detected → DATECOL=${DATECOL:-<none>}  HAS_LOSER=$HAS_LOSER  HAS_OPP=$HAS_OPP  FILTER_BY_YEAR=$FILTER_BY_YEAR"

      - name: Build backfill SQL (champ + runner) with dedup
     
        run: |
          set -euo pipefail

          YEAR="${SEASON_YEAR}"

          # Si no hay DATECOL pero pidieron filtrar por año → forzamos sin fecha
          if [[ -z "${DATECOL:-}" && "${FILTER_BY_YEAR}" == "true" ]]; then
            echo "No DATECOL detectado; forzamos FILTER_BY_YEAR=false (fallback sin fecha)."
            FILTER_BY_YEAR="false"
          fi

          # Puntos por nivel (se insertará por sed)
          echo "
            SELECT 'G' AS level, 2000 AS champ, 1200 AS runner UNION ALL
            SELECT 'M',             1000,          600         UNION ALL
            SELECT 'A',              500,          300
          " > /tmp/_points_cte.sql

          # === Plantillas SQL (6) ===
          cat > /tmp/CHAMP_WITH_DATE.tpl.sql <<'SQL'
          WITH finals AS (
            SELECT m.tourney_id, MAX(m.__DATECOL__) AS final_date
            FROM estratego_v1.matches m
            WHERE m.round='F' AND EXTRACT(YEAR FROM m.__DATECOL__) = __YEAR__
            GROUP BY 1
          ),
          final_rows AS (
            SELECT m.tourney_id, m.__DATECOL__ AS match_dt, m.winner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.__DATECOL__= f.final_date
            WHERE m.round='F'
          ),
          tmap AS (
            SELECT t.tourney_id, public.norm_tourney(t.name) AS tourney_key, t.level
            FROM estratego_v1.tournaments t
          ),
          points AS ( __POINTS__ ),
          joined AS (
            SELECT tm.tourney_key, fr.winner_id AS player_id, p.champ AS points, 'champ' AS title_code, fr.match_dt
            FROM final_rows fr
            JOIN tmap tm USING (tourney_id)
            JOIN points p ON p.level = tm.level
          ),
          dedup AS (
            SELECT DISTINCT ON (tourney_key, player_id)
                   tourney_key, player_id, points, title_code
            FROM joined
            ORDER BY tourney_key, player_id, match_dt DESC
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM dedup
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          cat > /tmp/CHAMP_NO_DATE.tpl.sql <<'SQL'
          WITH finals AS (
            SELECT m.tourney_id, MAX(m.match_id) AS final_match_id
            FROM estratego_v1.matches m
            WHERE m.round='F'
            GROUP BY 1
          ),
          final_rows AS (
            SELECT m.tourney_id, m.match_id AS final_match_id, m.winner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.match_id   = f.final_match_id
            WHERE m.round='F'
          ),
          tmap AS (
            SELECT t.tourney_id, public.norm_tourney(t.name) AS tourney_key, t.level
            FROM estratego_v1.tournaments t
          ),
          points AS ( __POINTS__ ),
          joined AS (
            SELECT tm.tourney_key, fr.winner_id AS player_id, p.champ AS points, 'champ' AS title_code, fr.final_match_id
            FROM final_rows fr
            JOIN tmap tm USING (tourney_id)
            JOIN points p ON p.level = tm.level
          ),
          dedup AS (
            SELECT DISTINCT ON (tourney_key, player_id)
                   tourney_key, player_id, points, title_code
            FROM joined
            ORDER BY tourney_key, player_id, final_match_id DESC
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM dedup
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          cat > /tmp/RUNNER_LOSER_WITH_DATE.tpl.sql <<'SQL'
          WITH finals AS (
            SELECT m.tourney_id, MAX(m.__DATECOL__) AS final_date
            FROM estratego_v1.matches m
            WHERE m.round='F' AND EXTRACT(YEAR FROM m.__DATECOL__) = __YEAR__
            GROUP BY 1
          ),
          final_rows AS (
            SELECT m.tourney_id, m.__DATECOL__ AS match_dt, m.winner_id, m.loser_id AS runner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.__DATECOL__= f.final_date
            WHERE m.round='F'
          ),
          tmap AS (
            SELECT t.tourney_id, public.norm_tourney(t.name) AS tourney_key, t.level
            FROM estratego_v1.tournaments t
          ),
          points AS ( __POINTS__ ),
          joined AS (
            SELECT tm.tourney_key, fr.runner_id AS player_id, p.runner AS points, 'runner' AS title_code, fr.match_dt
            FROM final_rows fr
            JOIN tmap tm USING (tourney_id)
            JOIN points p ON p.level = tm.level
          ),
          dedup AS (
            SELECT DISTINCT ON (tourney_key, player_id)
                   tourney_key, player_id, points, title_code
            FROM joined
            ORDER BY tourney_key, player_id, match_dt DESC
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM dedup
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          cat > /tmp/RUNNER_OPP_WITH_DATE.tpl.sql <<'SQL'
          WITH finals AS (
            SELECT m.tourney_id, MAX(m.__DATECOL__) AS final_date
            FROM estratego_v1.matches m
            WHERE m.round='F' AND EXTRACT(YEAR FROM m.__DATECOL__) = __YEAR__
            GROUP BY 1
          ),
          final_rows AS (
            SELECT m.tourney_id, m.__DATECOL__ AS match_dt, m.winner_id,
                   CASE WHEN m.player_id = m.winner_id THEN m.opponent_id ELSE m.player_id END AS runner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.__DATECOL__= f.final_date
            WHERE m.round='F'
          ),
          tmap AS (
            SELECT t.tourney_id, public.norm_tourney(t.name) AS tourney_key, t.level
            FROM estratego_v1.tournaments t
          ),
          points AS ( __POINTS__ ),
          joined AS (
            SELECT tm.tourney_key, fr.runner_id AS player_id, p.runner AS points, 'runner' AS title_code, fr.match_dt
            FROM final_rows fr
            JOIN tmap tm USING (tourney_id)
            JOIN points p ON p.level = tm.level
          ),
          dedup AS (
            SELECT DISTINCT ON (tourney_key, player_id)
                   tourney_key, player_id, points, title_code
            FROM joined
            ORDER BY tourney_key, player_id, match_dt DESC
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM dedup
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          cat > /tmp/RUNNER_LOSER_NO_DATE.tpl.sql <<'SQL'
          WITH finals AS (
            SELECT m.tourney_id, MAX(m.match_id) AS final_match_id
            FROM estratego_v1.matches m
            WHERE m.round='F'
            GROUP BY 1
          ),
          final_rows AS (
            SELECT m.tourney_id, m.match_id AS final_match_id, m.winner_id, m.loser_id AS runner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.match_id   = f.final_match_id
            WHERE m.round='F'
          ),
          tmap AS (
            SELECT t.tourney_id, public.norm_tourney(t.name) AS tourney_key, t.level
          FROM estratego_v1.tournaments t
          ),
          points AS ( __POINTS__ ),
          joined AS (
            SELECT tm.tourney_key, fr.runner_id AS player_id, p.runner AS points, 'runner' AS title_code, fr.final_match_id
            FROM final_rows fr
            JOIN tmap tm USING (tourney_id)
            JOIN points p ON p.level = tm.level
          ),
          dedup AS (
            SELECT DISTINCT ON (tourney_key, player_id)
                   tourney_key, player_id, points, title_code
            FROM joined
            ORDER BY tourney_key, player_id, final_match_id DESC
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM dedup
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          cat > /tmp/RUNNER_OPP_NO_DATE.tpl.sql <<'SQL'
          WITH finals AS (
            SELECT m.tourney_id, MAX(m.match_id) AS final_match_id
            FROM estratego_v1.matches m
            WHERE m.round='F'
            GROUP BY 1
          ),
          final_rows AS (
            SELECT m.tourney_id, m.match_id AS final_match_id, m.winner_id,
                   CASE WHEN m.player_id = m.winner_id THEN m.opponent_id ELSE m.player_id END AS runner_id
            FROM estratego_v1.matches m
            JOIN finals f
              ON m.tourney_id = f.tourney_id
             AND m.match_id   = f.final_match_id
            WHERE m.round='F'
          ),
          tmap AS (
            SELECT t.tourney_id, public.norm_tourney(t.name) AS tourney_key, t.level
            FROM estratego_v1.tournaments t
          ),
          points AS ( __POINTS__ ),
          joined AS (
            SELECT tm.tourney_key, fr.runner_id AS player_id, p.runner AS points, 'runner' AS title_code, fr.final_match_id
            FROM final_rows fr
            JOIN tmap tm USING (tourney_id)
            JOIN points p ON p.level = tm.level
          ),
          dedup AS (
            SELECT DISTINCT ON (tourney_key, player_id)
                   tourney_key, player_id, points, title_code
            FROM joined
            ORDER BY tourney_key, player_id, final_match_id DESC
          )
          INSERT INTO public.player_defense_prev_year (tourney_key, player_id, points, title_code)
          SELECT tourney_key, player_id, points, title_code
          FROM dedup
          ON CONFLICT (tourney_key, player_id) DO UPDATE
          SET points=EXCLUDED.points, title_code=EXCLUDED.title_code;
          SQL

          # === Sustitución de placeholders en copias de trabajo ===
          sed "s|__POINTS__|$(tr -d '\n' < /tmp/_points_cte.sql)|" /tmp/CHAMP_NO_DATE.tpl.sql             > /tmp/CHAMP_NO_DATE.sql
          sed "s|__POINTS__|$(tr -d '\n' < /tmp/_points_cte.sql)|" /tmp/RUNNER_LOSER_NO_DATE.tpl.sql       > /tmp/RUNNER_LOSER_NO_DATE.sql
          sed "s|__POINTS__|$(tr -d '\n' < /tmp/_points_cte.sql)|" /tmp/RUNNER_OPP_NO_DATE.tpl.sql         > /tmp/RUNNER_OPP_NO_DATE.sql

          if [[ "${FILTER_BY_YEAR}" == "true" ]]; then
            sed -e "s|__POINTS__|$(tr -d '\n' < /tmp/_points_cte.sql)|" \
                -e "s|__YEAR__|${YEAR}|g" \
                -e "s|__DATECOL__|${DATECOL}|g" \
                /tmp/CHAMP_WITH_DATE.tpl.sql > /tmp/CHAMP_WITH_DATE.sql

            sed -e "s|__POINTS__|$(tr -d '\n' < /tmp/_points_cte.sql)|" \
                -e "s|__YEAR__|${YEAR}|g" \
                -e "s|__DATECOL__|${DATECOL}|g" \
                /tmp/RUNNER_LOSER_WITH_DATE.tpl.sql > /tmp/RUNNER_LOSER_WITH_DATE.sql

            sed -e "s|__POINTS__|$(tr -d '\n' < /tmp/_points_cte.sql)|" \
                -e "s|__YEAR__|${YEAR}|g" \
                -e "s|__DATECOL__|${DATECOL}|g" \
                /tmp/RUNNER_OPP_WITH_DATE.tpl.sql > /tmp/RUNNER_OPP_WITH_DATE.sql
          fi

          # === Ejecución según modo ===
          if [[ "${FILTER_BY_YEAR}" == "true" ]]; then
            echo "[Champ] with date/year"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/CHAMP_WITH_DATE.sql

            if [[ "${HAS_LOSER}" == "t" ]]; then
              echo "[Runner] loser_id with date/year"
              psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/RUNNER_LOSER_WITH_DATE.sql
            elif [[ "${HAS_OPP}" == "t" ]]; then
              echo "[Runner] opponent_id with date/year"
              psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/RUNNER_OPP_WITH_DATE.sql
            else
              echo "No loser_id/opponent_id → solo campeón."
            fi
          else
            echo "[Champ] NO date (latest by match_id)"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/CHAMP_NO_DATE.sql

            if [[ "${HAS_LOSER}" == "t" ]]; then
              echo "[Runner] loser_id NO date"
              psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/RUNNER_LOSER_NO_DATE.sql
            elif [[ "${HAS_OPP}" == "t" ]]; then
              echo "[Runner] opponent_id NO date"
              psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/RUNNER_OPP_NO_DATE.sql
            else
              echo "No loser_id/opponent_id → solo campeón."
            fi
          fi

      - name: Export CSV artifact (joined with tournament name/level)
        run: |
          mkdir -p /tmp/defense_artifacts
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL' > /tmp/defense_artifacts/defense_points_prev_year.csv
          COPY (
            SELECT
              pd.tourney_key,
              t.name AS tournament_name,
              t.level,
              pd.player_id,
              pd.points,
              pd.title_code
            FROM public.player_defense_prev_year pd
            LEFT JOIN estratego_v1.tournaments t
              ON public.norm_tourney(t.name) = pd.tourney_key
            ORDER BY pd.tourney_key, pd.points DESC, pd.player_id
          ) TO STDOUT WITH CSV HEADER;
          SQL
          echo "CSV rows:"; wc -l /tmp/defense_artifacts/defense_points_prev_year.csv || true
          head -n 12 /tmp/defense_artifacts/defense_points_prev_year.csv || true

      - name: Quick sample
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "
            SELECT *
            FROM public.player_defense_prev_year
            ORDER BY tourney_key, points DESC, player_id
            LIMIT 20;
          "

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: defense_points_prev_year
          path: /tmp/defense_artifacts/defense_points_prev_year.csv
          retention-days: 7
