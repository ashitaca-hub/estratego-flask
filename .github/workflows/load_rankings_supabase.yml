name: Cargar ranking ATP (Sportradar â†’ Postgres Supabase)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "10 4 * * MON"

jobs:
  load-ranking:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SR_API_KEY: ${{ secrets.SR_API_KEY }}     # Sportradar
      DATABASE_URL: ${{ secrets.DATABASE_URL }} # postgres://user:pass@host:5432/db
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests psycopg2-binary

      - name: Ensure table and view
        run: |
          cat > /tmp/init_rankings.sql << 'SQL'
          create table if not exists public.rankings_snapshot_int (
            snapshot_date date not null,
            year int not null,
            week int not null,
            player_id int not null,      -- id externo SR (digits)
            rank int not null,
            points int,
            player_name text,
            country_code text,
            movement int,
            competitions_played int,
            source text default 'sportradar',
            created_at timestamptz default now(),
            updated_at timestamptz default now(),
            primary key (snapshot_date, player_id)
          );
          create index if not exists rankings_snapshot_int_week_idx
            on public.rankings_snapshot_int (year, week);

          create or replace view public.v_player_rank_now_int as
          select distinct on (player_id)
            player_id, rank, points, snapshot_date, year, week
          from public.rankings_snapshot_int
          order by player_id, snapshot_date desc, week desc, rank asc;
          SQL
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/init_rankings.sql

      - name: Write loader (direct psycopg2)
        run: |
          cat > load_rankings_pg.py << 'PY'
          import os, re, requests, psycopg2
          from psycopg2.extras import execute_values
          from datetime import date

          SR_API_KEY   = os.environ["SR_API_KEY"]
          DATABASE_URL = os.environ["DATABASE_URL"]
          BASE_URL     = "https://api.sportradar.com/tennis/trial/v3/en"

          def digits(s):
              return int(re.sub(r"\\D","", s or "")) if s else None

          def fetch_atp_rankings():
              r = requests.get(f"{BASE_URL}/rankings.json",
                               headers={"accept":"application/json","x-api-key":SR_API_KEY},
                               timeout=30)
              r.raise_for_status()
              data = r.json()
              for blk in data.get("rankings", []):
                  if (blk.get("name") == "ATP") and ((blk.get("gender") or "").lower() == "men"):
                      year = int(blk["year"]); week = int(blk["week"])
                      rows = []
                      for cr in blk.get("competitor_rankings", []):
                          comp = cr.get("competitor") or {}
                          pid = digits(comp.get("id"))
                          rk  = cr.get("rank")
                          if not pid or not rk: continue
                          rows.append((
                              date.today().isoformat(),
                              year, week, pid, int(rk),
                              cr.get("points"),
                              comp.get("name"),
                              comp.get("country_code"),
                              cr.get("movement"),
                              cr.get("competitions_played"),
                              "sportradar"
                          ))
                      return rows, year, week
              return [], None, None

          UPSERT_SQL = """
          insert into public.rankings_snapshot_int
            (snapshot_date, year, week, player_id, rank, points, player_name, country_code, movement, competitions_played, source)
          values %s
          on conflict (snapshot_date, player_id) do update set
            rank = excluded.rank,
            points = excluded.points,
            player_name = coalesce(excluded.player_name, public.rankings_snapshot_int.player_name),
            country_code = coalesce(excluded.country_code, public.rankings_snapshot_int.country_code),
            movement = excluded.movement,
            competitions_played = excluded.competitions_played,
            updated_at = now();
          """

          def main():
              rows, year, week = fetch_atp_rankings()
              if not rows:
                  print("No rankings found."); return
              conn = psycopg2.connect(DATABASE_URL)
              with conn, conn.cursor() as cur:
                  execute_values(cur, UPSERT_SQL, rows, page_size=2000)
              conn.close()
              print(f"UPSERT OK - {len(rows)} filas (year={year}, week={week})")

          if __name__ == "__main__":
              main()
          PY

      - name: Run loader
        run: python load_rankings_pg.py

      - name: Quick checks
        run: |
          psql "$DATABASE_URL" -c "select count(*) as filas_hoy from public.rankings_snapshot_int where snapshot_date = current_date;"
          psql "$DATABASE_URL" -c "select player_id, rank, points, snapshot_date from public.v_player_rank_now_int order by rank asc limit 10;"
