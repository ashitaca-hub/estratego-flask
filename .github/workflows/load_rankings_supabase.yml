name: Cargar ranking ATP (Sportradar → Supabase)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "10 4 * * MON"  # Lunes 04:10 UTC (ajusta si quieres)

jobs:
  load-ranking:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Secrets necesarios (configúralos en Settings → Secrets and variables → Actions)
      SR_API_KEY: ${{ secrets.SR_API_KEY }}               # Sportradar API key
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}           # https://<project>.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}           # opcional: para psql (DDL/checks)
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests "supabase>=2.4.0" psycopg2-binary

      # (OPCIONAL) Crear tabla/índices y vista con psql si proporcionas DATABASE_URL
      - name: Ensure table (via psql)
        if: env.DATABASE_URL != ''
        run: |
          cat > /tmp/init_rankings.sql << 'SQL'
          -- Tabla snapshot (esquema basado en snapshot_date/player_id INT)
          create table if not exists public.rankings_snapshot_int (
            snapshot_date date not null,
            year int not null,
            week int not null,
            player_id int not null,            -- id externo SR (digits)
            rank int not null,
            points int,
            player_name text,
            country_code text,
            movement int,
            competitions_played int,
            source text default 'sportradar',
            created_at timestamptz default now(),
            updated_at timestamptz default now(),
            primary key (snapshot_date, player_id)
          );

          create index if not exists rankings_snapshot_int_week_idx
            on public.rankings_snapshot_int (year, week);

          -- Vista: ranking vigente por jugador (último snapshot disponible)
          create or replace view public.v_player_rank_now_int as
          select distinct on (player_id)
            player_id,
            rank,
            points,
            snapshot_date,
            year,
            week
          from public.rankings_snapshot_int
          order by player_id, snapshot_date desc, week desc, rank asc;
          SQL
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /tmp/init_rankings.sql

      - name: Write loader script
        run: |
          cat > load_rankings_supabase.py << 'PY'
          import os, re
          from datetime import date
          import requests
          from supabase import create_client

          SR_API_KEY = os.environ["SR_API_KEY"]
          SUPABASE_URL = os.environ["SUPABASE_URL"]
          SUPABASE_SERVICE_ROLE_KEY = os.environ["SUPABASE_SERVICE_ROLE_KEY"]
          BASE_URL = "https://api.sportradar.com/tennis/trial/v3/en"

          def digits(s: str) -> int | None:
              m = re.sub(r"\D", "", s or "")
              return int(m) if m else None

          def fetch_atp_rankings():
              r = requests.get(f"{BASE_URL}/rankings.json",
                               headers={"accept":"application/json","x-api-key":SR_API_KEY},
                               timeout=30)
              r.raise_for_status()
              data = r.json()
              for blk in data.get("rankings", []):
                  if (blk.get("name") == "ATP") and ((blk.get("gender") or "").lower() == "men"):
                      year = int(blk.get("year"))
                      week = int(blk.get("week"))
                      rows = []
                      for cr in blk.get("competitor_rankings", []):
                          comp = cr.get("competitor") or {}
                          pid = digits(comp.get("id"))        # sr:competitor:225050 -> 225050
                          if not pid or not cr.get("rank"):
                              continue
                          rows.append({
                              "snapshot_date": date.today().isoformat(),
                              "year": year,
                              "week": week,
                              "player_id": pid,
                              "rank": int(cr["rank"]),
                              "points": cr.get("points"),
                              "player_name": comp.get("name"),
                              "country_code": comp.get("country_code"),
                              "movement": cr.get("movement"),
                              "competitions_played": cr.get("competitions_played"),
                              "source": "sportradar",
                          })
                      return rows, year, week
              return [], None, None

          def main():
              supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
              rows, year, week = fetch_atp_rankings()
              if not rows:
                  print("No rankings found."); return

              # Upsert idempotente por (snapshot_date, player_id)
              supabase.table("rankings_snapshot_int").upsert(
                  rows, on_conflict="snapshot_date,player_id"
              ).execute()

              print(f"UPSERT OK - inserted/updated: {len(rows)} (year={year}, week={week})")

              # Top10 del snapshot de hoy (debug)
              top = supabase.table("rankings_snapshot_int") \
                  .select("player_id,rank,points,player_name") \
                  .eq("snapshot_date", date.today().isoformat()) \
                  .order("rank") \
                  .limit(10) \
                  .execute()
              print("Top10 hoy:", top.data)

          if __name__ == "__main__":
              main()
          PY

      - name: Run loader
        run: python load_rankings_supabase.py

      - name: Quick checks (psql)
        if: env.DATABASE_URL != ''
        run: |
          psql "$DATABASE_URL" -c "select count(*) as filas_hoy from public.rankings_snapshot_int where snapshot_date = current_date;"
          psql "$DATABASE_URL" -c "select player_id, rank, points, snapshot_date from public.v_player_rank_now_int order by rank asc limit 10;"
