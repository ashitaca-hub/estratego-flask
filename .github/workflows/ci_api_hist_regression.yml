name: api-hist-regression

on:
  workflow_dispatch:
  # (Opcional) pásalo a comentario si no quieres ejecución diaria
  schedule:
    - cron: "0 5 * * *"

jobs:
  hist:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SR_API_KEY: ${{ secrets.SR_API_KEY }}
      SR_BASE: https://api.sportradar.com/tennis/trial/v3/en
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (python + jq + uvicorn fallback)
        run: |
          pip install -r requirements.txt || true
          pip show uvicorn >/dev/null 2>&1 || pip install uvicorn
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run API (background, robust)
        env:
          PORT: 8080   # cámbialo si tu main.py usa otro puerto
        run: |
          set -euo pipefail
          echo "Has SUPABASE_URL? $([ -n "${SUPABASE_URL:-}" ] && echo yes || echo no)"
          echo "Has SUPABASE_KEY? $([ -n "${SUPABASE_KEY:-}" ] && echo yes || echo no)"
          echo "Has SR_API_KEY?   $([ -n "${SR_API_KEY:-}" ] && echo yes || echo no)"

          # Intento 1: python main.py
          (python main.py > app.log 2>&1 & echo $! > api_pid.txt) || true

          ok=0
          for i in $(seq 1 30); do
            if curl -fsS "http://127.0.0.1:${PORT}/healthz" >/dev/null 2>&1; then
              echo "API UP via python main.py"; ok=1; break
            fi
            # si el proceso murió, salimos del bucle
            if ! kill -0 "$(cat api_pid.txt 2>/dev/null)" 2>/dev/null; then break; fi
            sleep 1
          done

          if [ "$ok" -eq 0 ]; then
            echo "Primer intento falló. Probando uvicorn main:app en ${PORT}…"
            # matar resto si quedó vivo
            if [ -f api_pid.txt ] && kill -0 "$(cat api_pid.txt)" 2>/dev/null; then kill "$(cat api_pid.txt)" || true; fi
            (python -m uvicorn main:app --host 127.0.0.1 --port "${PORT}" > app.log 2>&1 & echo $! > api_pid.txt) || true

            for i in $(seq 1 30); do
              if curl -fsS "http://127.0.0.1:${PORT}/healthz" >/dev/null 2>&1; then
                echo "API UP via uvicorn"; ok=1; break
              fi
              if ! kill -0 "$(cat api_pid.txt 2>/dev/null)" 2>/dev/null; then break; fi
              sleep 1
            done
          fi

          if [ "$ok" -eq 0 ]; then
            echo "::group::Últimas líneas de app.log"
            tail -n 200 app.log || true
            echo "::endgroup::"
            echo "::group::Puertos en escucha"
            ss -ltnp || true
            echo "::endgroup::"
            echo "::error::API no responde en http://127.0.0.1:${PORT}/healthz"
            exit 1
          fi

      - name: Healthcheck
        env:
          PORT: 8080
        run: curl -fsS "http://127.0.0.1:${PORT}/healthz"


      - name: Smoke Cincinnati (Sinner vs Alcaraz)
        run: |
          set -euo pipefail
          PAYLOAD='{"player_id":"sr:competitor:225050","opponent_id":"sr:competitor:407573","tournament":{"name":"Cincinnati","month":8},"years_back":4}'
          echo "== Payload ==" && echo "$PAYLOAD" | jq .
          RESP=$(curl -sS -X POST http://127.0.0.1:8080/matchup -H "Content-Type: application/json" -d "$PAYLOAD")
          echo "== Respuesta ==" && echo "$RESP" | jq .

          # Extraer hist_* y fallar solo si las tres son exactamente 0
          ALL_ZERO=$(echo "$RESP" | jq -e '
            [
              .features.deltas.hist_month,
              .features.deltas.hist_surface,
              .features.deltas.hist_speed
            ]
            | map((. // 0) == 0)
            | all
          ' >/dev/null && echo "yes" || echo "no")

          echo "ALL_ZERO=${ALL_ZERO}"
          if [ "$ALL_ZERO" = "yes" ]; then
            echo "::error::Todas las hist_* = 0 → posible regresión del Feature Store"
            exit 1
          else
            echo "OK: hay señal histórica en al menos una dimensión."
          fi

      - name: Stop API
        if: always()
        run: |
          if [ -f api_pid.txt ]; then
            kill "$(cat api_pid.txt)" || true
          fi
