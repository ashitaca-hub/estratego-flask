name: api-hist-regression

on:
  workflow_dispatch:

jobs:
  hist:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SR_API_KEY: ${{ secrets.SR_API_KEY }}
      SR_BASE: https://api.sportradar.com/tennis/trial/v3/en
      PORT: 8080
    steps:
      - uses: actions/checkout@v4

      - name: Install deps (python + jq + gunicorn)
        run: |
          pip install -r requirements.txt || true
          pip show gunicorn >/dev/null 2>&1 || pip install gunicorn
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run API with gunicorn (background)
        run: |
          set -euo pipefail
          echo "Has SUPABASE_URL? $([ -n "${SUPABASE_URL:-}" ] && echo yes || echo no)"
          echo "Has SUPABASE_KEY? $([ -n "${SUPABASE_KEY:-}" ] && echo yes || echo no)"
          echo "Has SR_API_KEY?   $([ -n "${SR_API_KEY:-}" ] && echo yes || echo no)"

          # Lanza Flask (WSGI) con gunicorn
          gunicorn main:app --workers 1 --bind 127.0.0.1:${PORT} --timeout 120 --log-level info > app.log 2>&1 &
          echo $! > api_pid.txt

          # Espera hasta 30s a que /health responda 200
          ok=0
          for i in $(seq 1 30); do
            if curl -fsS "http://127.0.0.1:${PORT}/health" >/dev/null 2>&1; then
              echo "API UP via gunicorn"; ok=1; break
            fi
            if ! kill -0 "$(cat api_pid.txt 2>/dev/null)" 2>/dev/null; then break; fi
            sleep 1
          done

          if [ "$ok" -eq 0 ]; then
            echo "::group::app.log (últimas 200 líneas)"; tail -n 200 app.log || true; echo "::endgroup::"
            echo "::error::API no responde en http://127.0.0.1:${PORT}/health"
            exit 1
          fi

      - name: Smoke Cincinnati (Sinner vs Alcaraz)
        run: |
          set -euo pipefail
          PAYLOAD='{"player_id":"sr:competitor:225050","opponent_id":"sr:competitor:407573","tournament":{"name":"Cincinnati","month":8},"years_back":4}'
          echo "== Payload ==" && echo "$PAYLOAD" | jq .
          RESP=$(curl -sS -X POST "http://127.0.0.1:${PORT}/matchup" -H "Content-Type: application/json" -d "$PAYLOAD")
          echo "== Respuesta ==" && echo "$RESP" | jq .

          # Falla sólo si las 3 hist_* son exactamente 0
          ALL_ZERO=$(echo "$RESP" | jq -e '
            [
              .features.deltas.hist_month,
              .features.deltas.hist_surface,
              .features.deltas.hist_speed
            ]
            | map((. // 0) == 0)
            | all
          ' >/dev/null && echo "yes" || echo "no")
          echo "ALL_ZERO=${ALL_ZERO}"
          if [ "$ALL_ZERO" = "yes" ]; then
            echo "::error::Todas las hist_* = 0 → posible regresión del Feature Store"
            exit 1
          else
            echo "OK: hay señal histórica en al menos una dimensión."
          fi

      - name: Stop API
        if: always()
        run: |
          if [ -f api_pid.txt ]; then
            kill "$(cat api_pid.txt)" || true
          fi
